{% autoescape off %}
#include "erl_nif.h"
#include <cstddef>
{% for backend in backends %}#include "perc_{{ backend.name }}.hpp"
{% endfor %}
{% for include in includes %}#include "{{ include }}"
{% endfor %}

enum Id : unsigned int {% templatetag openbrace %}
{% for record in module.records %}    {{ record }},
{% endfor %}{% for usertype in module.usertypes %}    {{ usertype }},
{% endfor %}{% templatetag closebrace %};

{% for backend in backends  %}
{{ backend.functions }}

{% endfor %}

{% for nif_func in module.nif_funcs %}
ERL_NIF_TERM {{ nif_func.internal }}(ErlNifEnv* env, int argc, const ERL_NIF_TERM argv[])
{% templatetag openbrace %}
    struct encoder e;
    if (argc != 2)
        return enif_make_badarg(env);
    if (!enc_init(env, &e, {{ nif_func.defaultsize }}, argv[1]))
        return enif_make_atom(env, "error");
    if ({{ nif_func.backend }}_encode<{{ nif_func.type_template }}>(&e, argv[0]) < 0)
        return enif_make_badarg(env);
    return enc_binary(&e);
{% templatetag closebrace %}

{% endfor %}

static ErlNifFunc nif_funcs[] = {% templatetag openbrace %}
{% for nif_func in module.nif_funcs %}    {% templatetag openbrace %}"{{ nif_func.name }}", 2, {{ nif_func.internal }}{% templatetag closebrace %},
{% endfor %}{% templatetag closebrace %};
ERL_NIF_INIT({{ module.name }}, nif_funcs, load, NULL, NULL, NULL)
{% endautoescape %}
